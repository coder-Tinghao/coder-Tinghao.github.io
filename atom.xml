<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feng&#39;s Blog</title>
  
  <subtitle>passion</subtitle>
  <link href="http://coder_tinghao.github.io/atom.xml" rel="self"/>
  
  <link href="http://coder_tinghao.github.io/"/>
  <updated>2022-12-06T12:29:51.901Z</updated>
  <id>http://coder_tinghao.github.io/</id>
  
  <author>
    <name>Fength</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mapreduce论文总结</title>
    <link href="http://coder_tinghao.github.io/2022/12/06/Mapreduce%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>http://coder_tinghao.github.io/2022/12/06/Mapreduce%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-06T12:29:51.000Z</published>
    <updated>2022-12-06T12:29:51.901Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>事务管理与并发控制</title>
    <link href="http://coder_tinghao.github.io/2022/11/14/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <id>http://coder_tinghao.github.io/2022/11/14/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</id>
    <published>2022-11-14T13:44:02.000Z</published>
    <updated>2022-11-20T03:34:20.945Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了看《数据库事务处理的艺术》，主要介绍事物原理和并发控制技术，之前有看过一些并发控制的博客，看的一头雾水，这本书相对更清晰一些</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h2><p>（A）原子性：要么成功–Committed，要么失败–Aborted</p><p>（C）一致性：<strong>from one valid state to another</strong>。数据在事务的操作下，一直符合“all defined rules”。一个是属于用户的语义所限定的数据一致性，一个是系统级，要求数据库系统符合可串行性（serializability）和可恢复性(recoverability),这两个将在下面具体解释</p><p>（I）隔离性：存在多个事务（多个会话中的不同的但同一时间段内运行的事务）同时运行，但他们运行的顺序好像是”serially“</p><p>（D）持久性：committed的数据，要能够永久保存</p><h2 id="事务的属性"><a href="#事务的属性" class="headerlink" title="事务的属性"></a>事务的属性</h2><h3 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h3><p><strong>保证并发的事务调度方式既能满足数据一致性需求，又能提高并发事务的执行效率</strong></p><p>如果事务间没有共同的操作对象（R&#x2F;W操作），则事务之间的执行顺序前后置换是没有关系的；但是如果事务间存在共同的操作对象，则事务间先后执行的顺序需要区分；对于存在共同操作对象的多个并发执行的事务，如果其执行等价于某个串行化调度，则这个调度是可串行化调度，具有了可串性化属性。可串性化保证的是多个事务并发时执行顺序要对数据的一致性没有影响。</p><p>关于等价，需要几个概念：冲突行为、冲突等价、冲突可串行化<br>冲突可串行化：某个调度“冲突等价”于一个或多个串行调度</p><h3 id="可恢复性"><a href="#可恢复性" class="headerlink" title="可恢复性"></a>可恢复性</h3><p>已经提交的事务没有读过被中止的事务的写数据，可恢复性保证多个事务并发调度后期的提交顺序对数据的一致性没有影响</p><h3 id="严格性"><a href="#严格性" class="headerlink" title="严格性"></a>严格性</h3><p>保证有冲突动作的并发事务中，先发生写操作的事务提交或中止的操作优先于其他事务。</p><h1 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h1><p>Serializable（串行化）<br>以物理上是可串行化的机制保证逻辑上符合串行化调度。一个事务在执行过程中完全看不到其他事务的对数据库所做的更新</p><p>Repeatable Read（可重复读）<br>一个事务在执行过程中可以看到其他事务已经提交的新插入的元组，但是不能看到其他事务对已有元组的更新。对于<strong>读出的记录</strong>，添加共享锁直到事务T1结束。其他事务T2对这个记录的修改会一直等待直到事务T1结束。但其他事务允许读取同样的数据。</p><p>Read Committed（已提交读）<br>一个事务在执行过程中可以看到<strong>已经提交</strong>的其他事务新插入的元组，能看到<strong>已经提交</strong>的其他事务对已有元组的更新</p><p>Read Uncommitted（未提交读）<br>一个事务在执行过程中可以看到<strong>没有提交</strong>的其他事务新插入的元组，能看到<strong>没有提交</strong>的其他事务对已有元组的更新</p><h1 id="快照隔离"><a href="#快照隔离" class="headerlink" title="快照隔离"></a>快照隔离</h1><p>使用快照隔离技术的事务中的所有读操作，读到的数据一定是一致的<br>避免了各种<strong>读异常现象</strong><br>如果没有写-写冲突，则会提交成功。不会发生读-写、写-读冲突<br>从事务开始时，处于<strong>当时的并发事务的状态（快照）</strong>被保存，利用这个快照可以判断本事务和其他事务之间启动的先后顺序，事务的读写情况。</p><p>快照隔离是MVCC技术的一种实现方式，MVCC技术的本质，是为每个对象在写操作发生时，生成一个新的版本；在读操作发生时，读出最近的一个版本。<br>并发事务同时写一个数据项，要遵循“First-Committer-Wins”,并发的同时写同一个数据项的事务只能有一个成功，另外一个必须回滚，相当于<strong>并发不存在</strong>，解决了写-写冲突。<br>存在写偏序问题，不能保证数据的一致性。<br>阅读进阶GSI–《Database Replication Using Generalized Snapshot Isolation》、PCSI、《Generalized Snapshot Isolation and a Prefix-Consistent Implementation》</p><h1 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h1><h2 id="并发控制的实现策略"><a href="#并发控制的实现策略" class="headerlink" title="并发控制的实现策略"></a>并发控制的实现策略</h2><h3 id="乐观（OCC）"><a href="#乐观（OCC）" class="headerlink" title="乐观（OCC）"></a>乐观（OCC）</h3><h3 id="悲观（PCC）"><a href="#悲观（PCC）" class="headerlink" title="悲观（PCC）"></a>悲观（PCC）</h3><h2 id="并发控制的实现技术"><a href="#并发控制的实现技术" class="headerlink" title="并发控制的实现技术"></a>并发控制的实现技术</h2><h3 id="时间戳（TO）"><a href="#时间戳（TO）" class="headerlink" title="时间戳（TO）"></a>时间戳（TO）</h3><ul><li>写-读冲突 事务早于写操作，读要回滚；事务晚于写操作，读不受影响</li><li>读-写冲突 读前写后回滚写</li><li>写-写冲突 新写回滚</li><li>改进：Thomas写法则</li></ul><h3 id="基于有效性检查的并发控制方法"><a href="#基于有效性检查的并发控制方法" class="headerlink" title="基于有效性检查的并发控制方法"></a>基于有效性检查的并发控制方法</h3><p>分为：读阶段、有效性检查阶段、写阶段<br>读阶段先对局部变量进行修改（本地缓存），有效性检查，将局部变量复制到数据库中</p><h3 id="Commitment-ordering-CO"><a href="#Commitment-ordering-CO" class="headerlink" title="Commitment ordering(CO)"></a>Commitment ordering(CO)</h3><h3 id="串行化图形检测"><a href="#串行化图形检测" class="headerlink" title="串行化图形检测"></a>串行化图形检测</h3><h3 id="两阶段封锁（2PL）"><a href="#两阶段封锁（2PL）" class="headerlink" title="两阶段封锁（2PL）"></a>两阶段封锁（2PL）</h3><ul><li>2PL</li><li>S2PL<br>事务持有的排他锁必须在事务提交后才能释放</li><li>SS2PL<br>事务提交之前不得释放任何锁</li></ul><h3 id="多版本并发控制技术（MVCC）"><a href="#多版本并发控制技术（MVCC）" class="headerlink" title="多版本并发控制技术（MVCC）"></a>多版本并发控制技术（MVCC）</h3><ul><li>多版本时间戳排序</li><li>多版本两阶段封锁协议</li><li>基于MVCC的可串行化快照隔离并发控制方法（SSI）<br>SSI&#x3D; SS2PL+MVCC(+SI)+SIREAD锁<br>根据三种依赖关系：读写、写读、写写画并发事务依赖图</li></ul><h3 id="基于索引的并发控制技术"><a href="#基于索引的并发控制技术" class="headerlink" title="基于索引的并发控制技术"></a>基于索引的并发控制技术</h3><ul><li>谓词锁</li></ul><h1 id="日志技术与恢复子系统"><a href="#日志技术与恢复子系统" class="headerlink" title="日志技术与恢复子系统"></a>日志技术与恢复子系统</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看了看《数据库事务处理的艺术》，主要介绍事物原理和并发控制技术，之前有看过一些并发控制的博客，看的一头雾水，这本书相对更清晰一些&lt;/p&gt;
&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记hexo配置与部署</title>
    <link href="http://coder_tinghao.github.io/2022/07/26/%E8%AE%B0hexo%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://coder_tinghao.github.io/2022/07/26/%E8%AE%B0hexo%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2022-07-26T04:53:22.000Z</published>
    <updated>2022-07-27T08:18:16.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记hexo配置与部署"><a href="#记hexo配置与部署" class="headerlink" title="记hexo配置与部署"></a>记hexo配置与部署</h1><p>hexo中文文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><hr><p>因为官方文档的一点小问题和我对Mac系统环境变量、终端类型等的不熟悉，这个安装过程比较坎坷。关于Git和Node.js的安装比较顺利，我又顺手安装了Homebrew（Mac下的包管理器）。</p><hr><h2 id="Hexo安装过程中的小问题"><a href="#Hexo安装过程中的小问题" class="headerlink" title="Hexo安装过程中的小问题"></a>Hexo安装过程中的小问题</h2><p>Hexo的安装首先如文档所说出现了EACCES权限错误，解决办法是将npm的<strong>全局</strong>安装包放到新创建的npm-global文件夹，并将npm-global的路径添加到环境变量，问题就出在环境变量的配置，Node.js的文档中提到将npm-global&#x2F;bin添加到环境变量的语句加入到<del>&#x2F;.profile 中，</del>&#x2F;.profile是<strong>bash终端</strong>的环境变量配置文件，而现在Mac系统默认为<strong>zsh终端</strong>，需要将上述语句加入.zshrc文件中，保证在打开终端后npm全局环境变量已经加载。否则，需要每次source ~&#x2F;.profile才可以执行 hexo &lt; command &gt; 命令。经过几个小时的排查最终发现。</p><hr><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p>hexo n “新博客”  创建新博客</p><p>hexo clean      清理hexo缓存</p><p>hexo g          生成博客</p><p>hexo d          部署博客</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记hexo配置与部署&quot;&gt;&lt;a href=&quot;#记hexo配置与部署&quot; class=&quot;headerlink&quot; title=&quot;记hexo配置与部署&quot;&gt;&lt;/a&gt;记hexo配置与部署&lt;/h1&gt;&lt;p&gt;hexo中文文档：&lt;a href=&quot;https://hexo.io/zh-c</summary>
      
    
    
    
    
    <category term="日常" scheme="http://coder_tinghao.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://coder_tinghao.github.io/2022/07/23/test/"/>
    <id>http://coder_tinghao.github.io/2022/07/23/test/</id>
    <published>2022-07-23T09:05:10.000Z</published>
    <updated>2022-07-23T09:05:10.883Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://coder_tinghao.github.io/2022/07/23/hello-world/"/>
    <id>http://coder_tinghao.github.io/2022/07/23/hello-world/</id>
    <published>2022-07-23T09:01:52.597Z</published>
    <updated>2022-07-23T09:01:52.597Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
